Feature: don't use world writable trash dirs
TODO:
 x Consolidate tests about store_absolute/relative_paths from test_trash and 
   test_trash_info
 - Method1VolumeTrashDirectory --> remove super class TrashDirectory
    -> make TrashDirectory.trash() testable
        -> relax dependency of TrashDirectory.trash() from path_for_trash_info
        -> Collapse _path_for_trashinfo
            -> make TrashDirectory.trash() testable
               -> write integration test for trash-put warning 'dir is not 
                  sticky' (in test_trash_put:trash_put_stderr
                   -> add a fake volume support in TrashPutCmd
                      -> make TrashPutCmd able to be configured for adding 
                         fake volume
                          -> make GlobalTrashCan.volume_of which uses data 
                             from list of volumes instead of using the other
                             strategy
                               -> write a FakeFstab with consistent volume_of 
                               and list_mount_points (tested, the one I wrote 
                               seems not to work)

 - consolidate use of enumeration of file between trash-list and trash-restore
 - consolidate the enumeration of TrashDirs between trash-list/restore and
   trash-put
 - on trash-list:
    - don't list contents of world writable TrashDirs
    - print warning on stderr
 - on trash-restore:
    - don't list contents of world writable TrashDirs
    - print warning on stderr
 - on trash-empty:
    - maybe delete without problem
 - on trash-put:
    - don't use world writable TrashDirs
    - print warning on stderr



Working on:
 - Removing the TrashDirectory hierarchy:
    x Remove HomeTrashDirectory
       x move the behaviour of name() to TrashDirectory
       x remove import in test_trash.py
          x make HomeTrashDirectory a factory for TestTrashedFile
    x Remove references to VolumeTrashDirectory from:
       x trash.py
       x test_trash.py
    - Collapse check:
       - Move Method1VolumeTrashDirectory:check to a Strategy
         - trash.py
         - test_trash.py
            - in Method1VolumeTrashDirectoryTest factor out "chmod +/-t dir"

TrashPutCmd dependencies:
   - stderr
   - stdout
   - environ
   - (internal) reporter 
   - (internal) GlobalTrashCan
   - (internal) Logger

GlobalTrashCan dependencies:
   - environ
   - reporter
   - getuid
   - list_mount_points
   - datetime.now


TrashDirectory collaborators:
   - os.path.normpath
   - os.path.basename
   - os.path.abspath
   - os.path.exists
   - os.path.join
   - os.path.isabs
   - os.chmod
   - os.open/os.write/os.close
   - TrashInfo
   - TrashedFile
   - datetime
   - shutil.move

GlobalTrashCan
 - enumerates possible TrashDirectories for a file to be trashed
 - enumerates all trashed files
 - trash a file in the right location
 - knows when a file should be skipped
 - knows when a file can be trashed in a TrashDir
 - enumerates all TrashDir of a Volume
 - compose method 1 and method 2 TrashDir

Features backlog:
 - trash-list should handle .trashinfo from home trashdir that contains 
   relative path
 - trash-list should print also the orphan files
 - support alias rmdir=trash-put
 - don't use world writable trash
 - enable trash-put home fallback
 - trash-empty removes files until a certain amount of space has been restored
 - trash-list --raw
 - trash-list <directory-name>
 - trash-list -R <directory-name>                 # recursive
 - trash-restore <path>                           # restore the newest
 - trash-restore <path> <dest>                    # restore to a certain destination
 - trash-restore --trashed-on="Apr 15, 08" <path>
 - trash-restore --version
 - trash-empty --from=/.Trash
 - trash-rm '*.o'
 - trash-empty should empty even the mac trash directory

Design todo:
 - invalidate Google Code download and put a redirect to PyPi
 - get rid of logging package
 - get rid of the IOError exception raising on file is not in the same volume
 - get rid of TrashDirectory.info_dir and files_dir properties
 - remove all the duplication 
    - all_info_files, trashed_files and for_all_trashed_files
 - restore the stress test for persist trashinfo (not sure)
 - remove NullReporter if not used
 - get rid of TrashInfo abstraction
 - get rid of TimeUtils.parse_iso8601 if not used
 - rename remove_file in to remove_existing_file
 - refactor TrashPutCmd for simplicity

Test to be ported to nosetests:
 - trash-put:
    - trash in home trashcan
    - print version
    - trash in volume trashcan 1
    - trash in volume trashcan 2
 - it should trash to $topdir/.Trash-UID when $topdir/.Trash is not suitable
    - when $topdir/.Trash does not exists 
    - when $topdir/.Trash is a symlink
    - when $topdir/.Trash is not sticky
 - should refuse to create the $topdir/.Trash/$uid directory if the 
   $topdir/.Trash is not sticky

 

