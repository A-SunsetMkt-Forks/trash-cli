Feature: trash-rm

Usage example:

    > trash-list
    2010-11-15 19:27:29 /home/kfrance/handbook/introduction.html
    2010-11-15 19:27:25 /home/kfrance/handbook/activities.html
    2011-02-21 09:23:37 /home/kfrance/dissertation/src/bad_creature.o
    2011-02-21 09:23:37 /home/kfrance/dissertation/src/Color_gene.o
    2011-02-21 09:23:37 /home/kfrance/dissertation/src/Perceptron.o
    > trash-rm '*.o'
    > trash-list
    2010-11-15 19:27:29 /home/kfrance/handbook/introduction.html
    2010-11-15 19:27:25 /home/kfrance/handbook/activities.html

TODO:
 - prepare a list_trashinfos that list all trashinfo from all known valid 
   trashdirectories
    - test for list_all_original_path_with_trashinfo:
       - make easier understand when a trashdir is skipped
          - remove dependency of Harvester from TrashDirs


How commands get the list of trashed_files?

 - trash-list
    - AvailableTrashDirs
       - FileSystemReader
 - trash-empty
    - AvailableTrashDirs
       - FileSystemReader
 - trash-put
    - GlobalTrashCan (_possible_trash_directories_for)
       - _home_trash_dir
       - trash_directories_for_volume
 - restore-trash
    - GlobalTrashCan.trashed_files
       - all_info_files
       - _create_trashed_file_from_info_file
 - trash-rm:
     - def list_files_to(self, output)
         for file in files:
            out.garbage(original_path, info_file, original_file)
         
      
      



Design todo:
 - get rid of logging package
 - get rid of TrashDirectory.info_dir and files_dir properties
 - remove all the duplication 
    - all_info_files, trashed_files and for_all_trashed_files
 - restore the stress test for persist trashinfo (not sure)
 - remove NullReporter if not used
 - get rid of TrashInfo abstraction
 - get rid of TimeUtils.parse_iso8601 if not used
 - rename remove_file in to remove_existing_file
 - refactor TrashPutCmd for simplicity

TrashPutCmd dependencies:
   - stderr
   - stdout
   - environ
   - (internal) reporter 
   - (internal) GlobalTrashCan
   - (internal) Logger

GlobalTrashCan dependencies:
   - environ
   - reporter
   - getuid
   - list_mount_points
   - datetime.now

TrashDirectory collaborators:
   - os.path.normpath
   - os.path.basename
   - os.path.abspath
   - os.path.exists
   - os.path.join
   - os.path.isabs
   - os.chmod
   - os.open/os.write/os.close
   - TrashInfo
   - TrashedFile
   - datetime
   - shutil.move

GlobalTrashCan responsibilies:
 - enumerates possible TrashDirectories for a file to be trashed
 - enumerates all trashed files
 - trash a file in the right location
 - knows when a file should be skipped
 - knows when a file can be trashed in a TrashDir
 - enumerates all TrashDir of a Volume
 - compose method 1 and method 2 TrashDir

Features backlog:
 - trash-list should handle .trashinfo from home trashdir that contains 
   relative path
 - trash-list should print also the orphan files
 - support alias rmdir=trash-put
 - don't use world writable trash
 - enable trash-put home fallback
 - trash-empty removes files until a certain amount of space has been restored
 - trash-list --raw
 - trash-list <directory-name>
 - trash-list -R <directory-name>                 # recursive
 - trash-restore <path>                           # restore the newest
 - trash-restore <path> <dest>                    # restore to a certain destination
 - trash-restore --trashed-on="Apr 15, 08" <path>
 - trash-restore --version
 - trash-empty --from=/.Trash
 - trash-rm '*.o'
 - trash-empty should empty even the mac trash directory

Test to be ported to nosetests:
 - trash-put:
    - trash in home trashcan
    - print version
    - trash in volume trashcan 1
    - trash in volume trashcan 2
 - it should trash to $topdir/.Trash-UID when $topdir/.Trash is not suitable
    - when $topdir/.Trash does not exists 
    - when $topdir/.Trash is a symlink
    - when $topdir/.Trash is not sticky
 - should refuse to create the $topdir/.Trash/$uid directory if the 
   $topdir/.Trash is not sticky


