Working on:
 - Fixing exit code when fail to trash files:
    - decide exit code values
    - document exit code values (in manpages)
    - write a test testing trash-put with non-existent
       x clean up test_trash_put.py
           x describe_trash_put --> when_
          
    - implement and refactor:
       - find a better name for TrashPutReporter
       - make TrashPutReport store exit code, initialized to SUCCESS
       - make TrashPutCmd#run return the exit_code from the reporter 

 - Removing the TrashDirectory hierarchy:
    - Remove HomeTrashDirectory
       - move the behaviour of name() to TrashDirectory
       - remove import in test_trash.py
          - make HomeTrashDirectory a factory for TestTrashedFile
    - Remove references to VolumeTrashDirectory
       - trash.py
       - test_trash.py
    - Collapse check:
       - Move Method1VolumeTrashDirectory:check to a Strategy
         - trash.py
         - test_trash.py
            - in Method1VolumeTrashDirectoryTest factor out "chmod +/-t dir"

TrashDirectory collaborators:
   - os.path.normpath
   - os.path.basename
   - os.path.abspath
   - os.path.exists
   - os.path.join
   - os.path.isabs
   - os.chmod
   - os.open/os.write/os.close
   - TrashInfo
   - TrashedFile
   - datetime
   - shutil.move

GlobalTrashCan
 - enumerates possible TrashDirectories for a file to be trashed
 - enumerates all trashed files
 - trash a file in the right location
 - knows when a file should be skipped
 - knows when a file can be trashed in a TrashDir
 - enumerates all TrashDir of a Volume
 - compose method 1 and method 2 TrashDir

Features backlog:
 - trash-list should handle .trashinfo from home trashdir that contains 
   relative path
 - trash-list should print also the orphan files
 - support alias rmdir=trash-put
 - don't use world writable trash
 - enable trash-put home fallback
 - trash-empty removes files until a certain amount of space has been restored
 - trash-list --raw
 - trash-list <directory-name>
 - trash-list -R <directory-name>                 # recursive
 - trash-restore <path>                           # restore the newest
 - trash-restore <path> <dest>                    # restore to a certain destination
 - trash-restore --trashed-on="Apr 15, 08" <path>
 - trash-restore --version
 - trash-empty --from=/.Trash
 - trash-rm '*.o'
 - trash-empty should empty even the mac trash directory

Design todo:
 - invalidate Google Code download and put a redirect to PyPi
 - get rid of logging package
 - get rid of the IOError exception raising on file is not in the same volume
 - get rid of TrashDirectory.info_dir and files_dir properties
 - remove all the duplication 
    - all_info_files, trashed_files and for_all_trashed_files
 - restore the stress test for persist trashinfo (not sure)
 - remove NullReporter if not used
 - get rid of TrashInfo abstraction
 - get rid of TimeUtils.parse_iso8601 if not used
 - rename remove_file in to remove_existing_file
 - refactor TrashPutCmd for simplicity

Test to be ported to nosetests:
 - trash-put:
    - trash in home trashcan
    - print version
    - trash in volume trashcan 1
    - trash in volume trashcan 2
 - it should trash to $topdir/.Trash-UID when $topdir/.Trash is not suitable
    - when $topdir/.Trash does not exists 
    - when $topdir/.Trash is a symlink
    - when $topdir/.Trash is not sticky
 - should refuse to create the $topdir/.Trash/$uid directory if the 
   $topdir/.Trash is not sticky

 

